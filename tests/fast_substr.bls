// similar to rabin-karp algorithm

import "std/str";
import "std/vec" as vec;

let str = 'abracadabra';

// substring
let ss = 'abra';
let ss_len = ss.len();
let ss_hash = 0;
for let i = 0; i < ss_len; ++i { ss_hash += ss[i].byte() * 103; }

let locs = vec.new();
let window = '';
let hash = 0;
for let i = 0; i < str.len(); ++i {
	window += str[i];
	hash += str[i].byte() * 103;
	if window.len() < ss_len { continue; }
	if window.len() > ss_len {
		hash -= window.front().byte() * 103;
		window.erase(0);
	}
	if hash == ss_hash && ss == window {
		locs.push(i - ss_len + 1);
	}
}

assert(locs == vec.new(0, 7));
