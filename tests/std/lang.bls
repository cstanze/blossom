let vec = import('std/vec');
let map = import('std/map');
let lang = import('std/lang');

let SomeType = lang.struct(a = 10, b = 20);

impl SomeType.func1(x, y = 10, .kw, va...) {
	assert(self.a == 100);
	assert(self.b == 200);
	assert(x == 1);
	assert(y == 2);
	assert(kw['a'] == 10);
	assert(kw['b'] == 20);
	assert(kw['c'] == 30);
	assert(va == vec.new(3, 4));
}

impl SomeType.func2(x, y = 10, .kw, va...) {
	assert(self.a == 100);
	assert(self.b == 200);
	assert(x == 1);
	assert(y == 10);
	assert(kw['a'] == 10);
	assert(kw['b'] == 20);
	assert(va.empty());
}

let test = SomeType(a = 100, b = 200);

test.func1(1, a = 10, b = 20, c = 30, 2, 3, 4);
test.func2(1, a = 10, b = 20);

let EXIT_CODE = lang.enum(
	.OK,
	.FAIL,
	.IO_ERR,
	.LEX_FAIL,
	.PARSE_FAIL,
	.SOME_ERR = 20
);

// println(EXIT_CODE.PARSE_FAIL);
assert(EXIT_CODE.PARSE_FAIL == 4);
assert(EXIT_CODE.SOME_ERR == 20);