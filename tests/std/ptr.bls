import "std/ptr" as ptr;
import "std/vec" as vec;
import "std/lang" as lang;

let Node = lang.struct(d = 0, next = nil);
let List = lang.struct(head = nil);

impl List.add(data) {
	if self.head == nil {
		let head in self = Node(d = data);
		return;
	}
	let iter = ptr.new(self.head);
	while iter.get().next != nil {
		iter.set(iter.get().next);
	}
	let next in iter.get() = Node(d = data);
}

impl List.to_vec() {
	let v = vec.new();
	if self.head == nil { return v; }
	let iter = ptr.new(self.head);
	while iter.get() != nil {
		v.push(iter.get().d);
		iter.set(iter.get().next);
	}
	return v;
}

let l = List();
l.add(1);
l.add(2);
l.add(3);
l.add(4);

assert(l.to_vec() == vec.new(1, 2, 3, 4));