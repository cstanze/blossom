let io = import('std/io');
let fs = import('std/fs');
let os = import('std/os');
let fmt = import('std/fmt');
let vec = import('std/vec');
let sys = import('std/sys');
let lang = import('std/lang');
let cmake_base = import('./cmake_gen/base');
let install = import('./cmake_gen/install');
let find_lib = import('./cmake_gen/find_lib');
let shared_lib = import('./cmake_gen/shared_lib');
let binary = import('./cmake_gen/binary');

let default_install_rpaths = sys.install_prefix + '/lib/blossom/std;' + sys.install_prefix  + '/lib/blossom';

let Core = lang.struct(
	version = '3.0',
	proj_name = 'test',
	cxx_std = '11',
	prefix = sys.install_prefix,
	install_rpaths = default_install_rpaths,
	deps = vec.new(refs = true),
	installs = vec.new(refs = true),
	shared_libs = vec.new(refs = true),
	binaries = vec.new(refs = true),
	rpath_from_origin = '../../',
	use_blossom_vm = false
);

func new(proj_name) { return Core(proj_name = proj_name); };

impl Core.gen(ret = false) {
	let deps_str = '';
	for d in self.deps.each() {
		deps_str += d.gen() + '\n';
	}
	let installs_str = '';
	for i in self.installs.each() {
		installs_str += i.gen() + '\n';
	}
	let shared_libs_str = '';
	for sl in self.shared_libs.each() {
		shared_libs_str += sl.gen() + '\n';
	}
	let binaries_str = '';
	for bin in self.binaries.each() {
		binaries_str += bin.gen() + '\n';
	}
	let data = fmt.template(cmake_base.template_base);
	if ret { return data; }
	{ // this is inside a block as file must be closed before it is used
		let file = fs.fopen(os.get_cwd() + '/CMakeLists.txt', 'w+');
		io.fprintln(file, data);
	}
	let buildtype = '';
	if sys.args.len() > 1 && sys.args[1] == '--debug' {
		buildtype = 'Debug';
	} else {
		buildtype = 'Release';
	}
	let cwd = os.get_cwd();
	let changed = false;
	if !fs.exists('build/CMakeCache.txt') {
		os.mkdir('build');
		changed = true;
	} elif os.exec('grep CMAKE_BUILD_TYPE build/CMakeCache.txt | grep ' + buildtype + '>/dev/null 2>&1') != 0 {
		os.rm('build');
		os.mkdir('build');
		changed = true;
	}
	os.set_cwd('build');
	if changed && os.exec('cmake .. -DCMAKE_BUILD_TYPE=' + buildtype) != 0 {
		raise('failed to execute cmake');
	}
	let ins = '';
	if sys.args.len() > 0 && sys.args[0] == 'install' {
		ins = ' install';
	}
	if os.exec('make -j' + ins) != 0 {
		raise('failed to execute make');
	}
	os.set_cwd(cwd);
	return nil;
}

impl Core.add_dep(name) {
	let lib = find_lib.new(name);
	self.deps.push(lib);
	return ref(lib);
};

impl Core.add_install(name) {
	let ins = install.new(name, self.proj_name);
	self.installs.push(ins);
	return ref(ins);
};

impl Core.add_shared_lib(name, with_blossom_vm = true) {
	let lib = shared_lib.new(name, self.proj_name);
	if with_blossom_vm { self.add_blossomvm_libs(lib); }
	self.shared_libs.push(lib);
	return ref(lib);
};

impl Core.add_bin(name, with_blossom_vm = true) {
	let bin = binary.new(name);
	if with_blossom_vm { self.add_blossomvm_libs(bin); }
	self.binaries.push(bin);
	return ref(bin);
};

impl Core.add_rpath(rpath) { self.install_rpaths += ';' + rpath; return self; };

impl Core.rel_rpath(rpath_from_origin) { self.rpath_from_origin = rpath_from_origin; return self; };

impl Core.set_prefix(prefix) { self.prefix = prefix; return self; };

// internal functions

impl Coore.add_blossomvm_libs(obj) {
	if !self.use_blossom_vm {
		self.deps.push(shared_lib.blossomvm);
		self.use_blossom_vm = true;
	}
	obj.add_dep(shared_lib.blossomvm);
	return self;
};