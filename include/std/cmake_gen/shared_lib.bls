let fmt = import('std/fmt');
let vec = import('std/vec');
let lang = import('std/lang');
let find_lib = import('./find_lib');

let shared_lib_base =
`# {self.lib_name}
set(mod "{self.lib_name}")
add_library($\\{mod} SHARED "$\\{PROJECT_SOURCE_DIR}/{self.src_path}/$\\{mod}.cpp" {self.other_srcs})
target_link_libraries($\\{mod}{dep_names} $\\{GMP_LIBRARY} $\\{GMPXX_LIBRARY} $\\{MPFR_LIBRARY})
set_target_properties($\\{mod}
    PROPERTIES
    PREFIX "libblossom"
    LINK_FLAGS "$\\{EXTRA_LD_FLAGS}"
    LIBRARY_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/blossom"
    INSTALL_RPATH_USE_LINK_PATH TRUE
)
install(TARGETS $\\{mod}
	LIBRARY
	  DESTINATION lib/blossom/{self.proj_name}
	  COMPONENT Libraries
)`;

let blossomvm = find_lib.new('blossomvm');
blossomvm.make_reqd().add_path_suffix('blossom');

let SharedLib = lang.struct(
	proj_name = '',
	lib_name = 'sample_shared_lib',
	other_srcs = '',
	deps = vec.new(refs = true),
	src_path = 'src'
);

func new(name, proj) { return SharedLib(lib_name = name, proj_name = proj); }

impl SharedLib.add_src(src) { self.other_srcs += ' ' + src; return self; }

impl SharedLib.add_dep(dep) { self.deps.push(dep); return self; }

impl SharedLib.gen() {
	let dep_names = ' ';
	for d in self.deps.each() {
		dep_names += d.name() + ' ';
	}
	dep_names.pop();
	return fmt.template(shared_lib_base);
}

impl SharedLib.name() {
	return self.lib_name;
}