let vec = import('std/vec');
let str = import('std/str');
let sys = import('std/sys');
let fmt = import('std/fmt');
let lang = import('std/lang');

let find_lib_base =
`include_directories({include_dirs})
find_library({self.var_name.upper()}_LIBRARY {self.lib_name}{self.path_suffixes}{self.required}{prefix_path})
`;

let reqd_line_base =
`if(NOT {self.var_name.upper()}_LIBRARY)
	message(FATAL_ERROR "{self.var_name} is required but missing, looked in: $\\{INCLUDE_INSTALL_DIR}")
else()
	message("-- {self.var_name} found at: $\\{{self.var_name.upper()}_LIBRARY}")
endif()
`;

let FindLib = lang.struct(
	template = find_lib_base,
	lib_name = 'test',
	var_name = '',
	path_suffixes = '',
	required = '',
	use_homebrew = false,
	homebrew_name = '',
	ext_prefixes = vec.new(),
	blossom_lib = false
);

func new(lib_name) { return find_lib_t(lib_name = lib_name); };

impl FindLib.make_reqd() {
	self.required = ' REQUIRED';
	self.template += reqd_line_base;
	return self;
};

impl FindLib.set_var_name(var_name) { self.var_name = var_name; return self; };

impl FindLib.add_path_suffix(path_suffix) { self.path_suffixes += path_suffix; return self; };

impl FindLib.name() {
	if !self.var_name.empty() {
		return '${' + self.var_name.upper() + '_LIBRARY}';
	}
	return '${' + self.lib_name.upper() + '_LIBRARY}';
};

impl FindLibn.add_ext_prefix(ext_prefix) {
	self.ext_prefixes.push(ext_prefix);
	return self;
};

impl FindLib.make_blossom_lib() { self.blossom_lib = true; return self; };

impl FindLib.gen() {
	if self.var_name == '' { self.var_name = self.lib_name; }
	if !self.path_suffixes.empty() { self.path_suffixes = ' PATH_SUFFIXES "' + self.path_suffixes + '"'; }
	let include_dirs = '';
	let prefix_path = ' PATHS ';
	for prefix in self.ext_prefixes.each() {
		include_dirs += prefix + '/include ';
		prefix_path += prefix + '/lib ';
	}
	if !self.ext_prefixes.empty() {
		include_dirs.pop();
	}
	if self.blossom_lib {
		prefix_path += sys.install_prefix + '/lib/blossom ';
		self.lib_name = 'blossom' + self.lib_name;
	}
	if prefix_path == ' PATHS ' {
		prefix_path.clear();
	}
	if !prefix_path.empty() {
		prefix_path += 'NO_DEFAULT_PATH';
	}
	return fmt.template(self.template);
};