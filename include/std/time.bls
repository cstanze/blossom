// by default, {stdclk,sysclk}_now() provide nanosecond resolution

mload('std/time');

let nano = 1.0; // equivalent to what *_now() provides
let micro = nano / 1000;
let milli = micro / 1000;
let second = milli / 1000;
let minute = second / 60;
let hour = minute / 60;

let resolution = micro; // set to micro by default
let date_format = '%a %b %e %T %Z %Y';

func set_resolution(num) {
	resolution = num;
}

func now() {
	return system_clock_now_native();
}

func resolve(time, resol = nil) {
	let res = 0.0;
	if resol == nil {
		res = resolution;
	} else {
		res = resol;
	}
	return time.float() * res;
}

func hours(num) {
	return num.float() / hour;
}

func mins(num) {
	return num.float() / minute;
}

func seconds(num) {
	return num.float() / second;
}

func set_format(new_format) {
	date_format = new_format;
}

func format(time, fmt = nil) {
	if fmt == nil {
		return format_native(time, date_format);
	}
	return format_native(time, fmt);
}