mload('std/vec');

impl Vec.==(other) {
	if self._type_() != other._type_() { return false; }
	if self.len() != other.len() { return false; }
	let len = self.len();
	for let i = 0; i < len; ++i {
		if self[i] != other[i] { return false; }
	}
	return true;
}

// stores in the type - NOT object
impl Vec.contains(obj) {
	for data in self.each() {
		if data == obj { return true; }
	}
	return false;
}

// returns true if element is found in the list, else false
impl Vec.rem(obj) {
	let len = self.len();
	for let i = 0; i < len; ++i {
		if self[i] == obj {
			self.erase(i);
			return true;
		}
	}
	return false;
}

impl Vec.slice(start, end = -1) {
	if end == -1 { end = self.len(); }
	return self.slice_native(start, end);
}

impl Vec.sub(start, end = -1) {
	if end == -1 { end = self.len(); }
	return self.sub_native(start, end);
}

impl Vec.reverse() {
	if self.len() == 0 {
		return self;
	}

	let mid = self.len() / 2;

	for let i = 0; i < mid; ++i {
		let tmp = self[ i ];
		self[ i ] = self[ self.len() - i - 1 ];
		self[ self.len() - i - 1 ] = tmp;
	}
	
	return self;
}
